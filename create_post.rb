require 'date'

def generate_post_file(title, categories)
  date = DateTime.now.strftime("%Y-%m-%d")
  filename = "#{date}-#{title.downcase.strip.gsub(' ', '-')}.md"
  categories_str = categories.join(' ')

  content = <<~POST
    ---
    layout: post
    title: "#{title}"
    date: #{date}
    categories: [#{categories_str}]
    ---
    链表是一种基础且重要的数据结构，它由一系列节点组成，每个节点包含数据本身以及一个指向下一个节点的引用（在双向链表中，还会有一个指向前一个节点的引用）。

    链表的这种结构允许有效地在序列中的任何位置进行插入和删除操作，不需要像数组那样进行大量的元素移动。

    链表相关的算法题目：

    ### 1. 遍历和搜索
    - **单链表遍历**：遍历链表，访问链表中的每个节点。
    - **双向链表遍历**：既可以向前也可以向后遍历链表。
    - **查找链表中的元素**：根据值或位置查找元素。

    ### 2. 插入和删除
    - **在链表头部插入节点**：更新头部指针以指向新节点。
    - **在链表尾部插入节点**：遍历链表找到尾部，将尾部节点的next指向新节点。
    - **在链表中间插入节点**：找到特定位置或节点，调整指针以插入新节点。
    - **删除链表中的节点**：根据值或位置删除节点，并重新连接链表。

    ### 3. 链表反转
    - **反转整个链表**：递归或迭代地反转链表的指向。
    - **局部反转链表**：反转链表中指定区间的部分。

    ### 4. 环路检测
    - **判断链表是否有环**：使用快慢指针方法（Floyd判圈算法）。
    - **找到环的起始节点**：在检测到环存在后，找到环的入口。

    ### 5. 合并链表
    - **合并两个有序链表**：将两个有序链表合并为一个新的有序链表。
    - **交错合并链表**：将两个链表的节点交错合并成一个新链表。

    ### 6. 排序
    - **链表排序**：应用排序算法（如归并排序）对链表进行排序。

    ### 7. 复杂问题
    - **复制带随机指针的链表**：每个节点除了有一个next指针外，还有一个随机指针指向链表中的任意节点或null，要求复制这样的链表。
    - **重排链表**：重新排列链表节点，例如L0→L1→…→Ln-1→Ln重排为L0→Ln→L1→Ln-1→L2→Ln-2→…


  POST

  Dir.mkdir('_posts') unless Dir.exist?('_posts')

  File.open("_posts/#{filename}", 'w') do |file|
    file.puts content
  end

  puts "Post file generated: #{filename}"
end

# 用法示例
generate_post_file("数据结构-链表", ["go", "数据结构", "链表"])
